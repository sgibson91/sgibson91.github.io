<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Learning on</title><link>https://sgibson91.github.io/tags/learning/</link><description>Recent content in Learning on</description><generator>Hugo</generator><language>en-gb</language><lastBuildDate>Mon, 31 Jan 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://sgibson91.github.io/tags/learning/index.xml" rel="self" type="application/rss+xml"/><item><title>Things I've Learned: January 2022</title><link>https://sgibson91.github.io/blog/til-jan22/</link><pubDate>Mon, 31 Jan 2022 00:00:00 +0000</pubDate><guid>https://sgibson91.github.io/blog/til-jan22/</guid><description>&lt;ul>
&lt;li>Nested build matrices are not (yet?) supported in GitHub Actions, but you can explicitly define a set of matrix parameters using YAML array syntax.
See an example &lt;a href="https://github.com/sgibson91/testing-gh-actions/blob/3a0fec6d59c933646e6c6b673e37cadf1dafb3a2/.github/workflows/includes-matrix-with-list.yaml">here&lt;/a>.&lt;/li>
&lt;li>A pattern I often use to update my working branch with the default branch is:
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>git checkout main
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git pull &lt;span style="color:#75715e"># Add `upstream main` if appropriate&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git checkout my_branch
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>git merge main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>Mostly this is fine, but occasionally merge conflicts happen.
If I know I want to keep a specific version of a conflicting file from one of the branches (as opposed to finding a non-conflicting combination), &lt;a href="https://nitaym.github.io/ourstheirs/">&lt;code>--theirs/--ours&lt;/code>&lt;/a> can be used.
&lt;pre tabindex="0">&lt;code>git checkout --ours conflicting_filename # To keep the version from the current branch
git checkout --theirs conflicting_filename # To keep the file from the incoming branch
&lt;/code>&lt;/pre>Note that behaviour can change depending on which branch is checked out and whether a merge or rebase is being performed, so I recommend to double-check online!&lt;/li>
&lt;li>That the second &lt;code>---&lt;/code> in YAML delimits as if what follows it is another YAML file.
This can cause issues for command line YAML parsers like &lt;code>yq&lt;/code> and made pulling the front matter from my Markdown files a little trickier than expected!&lt;/li>
&lt;li>How to automatically tweet out new blog posts when they are merged into &lt;code>main&lt;/code>&lt;/li>
&lt;li>How to use a GitHub App to generate tokens in GitHub Action workflows.
The tokens can then be used to securely workaround the fact that GitHub Action workflows can&amp;rsquo;t be triggered by events that were authorised by the &lt;code>GITHUB_TOKEN&lt;/code> in another workflow.
There is a nice write-up that helped me &lt;a href="https://github.com/peter-evans/create-pull-request/blob/main/docs/concepts-guidelines.md#authenticating-with-github-app-generated-tokens">here&lt;/a>.&lt;/li>
&lt;/ul></description></item></channel></rss>