name: Build, Deploy, and Check the Website

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

defaults:
  run:
    shell: bash

jobs:
  build-and-deploy:
    concurrency: deploy
    runs-on: ubuntu-latest

    permissions:
      contents: write
      issues: write
      pull-requests: write

    env:
      DART_SASS_VERSION: 1.93.2
      HUGO_VERSION: 0.151.0
      NODE_VERSION: 22.18.0

    steps:
      - name: Checkout repo
        uses: actions/checkout@v5
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Node.js environment
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Create directory for user-specific executable files
        run: |
          mkdir -p "${HOME}/.local"

      - name: Install Dart Sass
        run: |
          curl -sLJO "https://github.com/sass/dart-sass/releases/download/${DART_SASS_VERSION}/dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz"
          tar -C "${HOME}/.local" -xf "dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz"
          rm "dart-sass-${DART_SASS_VERSION}-linux-x64.tar.gz"
          echo "${HOME}/.local/dart-sass" >> "${GITHUB_PATH}"

      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v3
        with:
          hugo-version: ${{ env.HUGO_VERSION }}
          extended: true

      - name: Verify installations
        run: |
          echo "Dart Sass: $(sass --version)"
          echo "Hugo: $(hugo version)"
          echo "Node.js: $(node --version)"

      - name: Install Node.js dependencies
        run: |
          [[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true

      - name: Cache restore
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: ${{ runner.temp }}/hugo_cache
          key: hugo-${{ github.run_id }}
          restore-keys:
            hugo-

      - name: Build site with Hugo
        run: |
          hugo \
            --gc \
            --minify \
            --cacheDir "${{ runner.temp }}/hugo_cache"

      - name: Cache save
        id: cache-save
        uses: actions/cache/save@v4
        with:
          path: ${{ runner.temp }}/hugo_cache
          key: ${{ steps.cache-restore.outputs.cache-primary-key }}

      - name: Check links
        uses: lycheeverse/lychee-action@v2
        with:
          args: >-
            --verbose
            --no-progress
            public/**/*.html
          # Fail action on broken links in Pull Requests
          fail: ${{ github.event_name == 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to GitHub Pages
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public

      - name: Deploy PR Preview
        if: github.event_name == 'pull_request'
        uses: rossjrw/pr-preview-action@v1
        with:
          source-dir: ./public

      - name: Create issue from file
        if: always()
        uses: peter-evans/create-issue-from-file@v6
        with:
          title: "[DO NOT CLOSE] Linkcheck Report"
          content-filepath: ./lychee/out.md
          labels: bug, website
          issue-number: 232

  checkfilesize:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Check for large files
        working-directory: ./static
        run: |
          echo "Performing file size check..."
          BIG_FILES=$(find . -size +5M -name ! -path "./.git/*" -print)
          if [ -n "$BIG_FILES" ] ; then
            echo "Uh-oh! Large files found!"
            echo "$BIG_FILES" 1>&2
            exit 1
          else
            echo "No large files found!"
          fi
