<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Devops on</title><link>https://sgibson91.github.io/tags/devops/</link><description>Recent content in Devops on</description><generator>Hugo</generator><language>en-gb</language><lastBuildDate>Thu, 12 May 2022 11:51:52 +0100</lastBuildDate><atom:link href="https://sgibson91.github.io/tags/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>Tech update: Multiple JupyterHubs, multiple clusters, one repository.</title><link>https://sgibson91.github.io/blog/2i2c-ci-cd-improvements/</link><pubDate>Thu, 12 May 2022 11:51:52 +0100</pubDate><guid>https://sgibson91.github.io/blog/2i2c-ci-cd-improvements/</guid><description>&lt;blockquote>
&lt;p>This blog was &lt;a href="https://2i2c.org/blog/2022/ci-cd-improvements/">originally posted by 2i2c&lt;/a> and represents a project Sarah lead and developed.&lt;/p>&lt;/blockquote>
&lt;p>2i2c manages the configuration and deployment of multiple Kubernetes clusters and JupyterHubs from &lt;a href="https://github.com/2i2c-org/infrastructure">a single open infrastructure repository&lt;/a>.
This is a challenging problem, as it requires us to centralize information about a number of &lt;em>independent&lt;/em> cloud services, and deploy them in an efficient and reliable manner.
Our initial attempt at this had a number of inefficiencies, and we recently completed an overhaul of its configuration and deployment infrastructure.&lt;/p></description></item><item><title>How I automated authorised cloud deployments from Pull Requests with GitHub Actions</title><link>https://sgibson91.github.io/blog/test-this-pr/</link><pubDate>Mon, 22 Nov 2021 19:35:00 +0000</pubDate><guid>https://sgibson91.github.io/blog/test-this-pr/</guid><description>&lt;blockquote>
&lt;p>This blog was originally posted on the Jupyter blog: &lt;a href="https://blog.jupyter.org/how-i-automated-authorised-cloud-deployments-from-pull-requests-with-github-actions-13f890538e32">https://blog.jupyter.org/how-i-automated-authorised-cloud-deployments-from-pull-requests-with-github-actions-13f890538e32&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>I recently did some work on the mybinder.org deployment infrastructure to solve a problem with testing Pull Requests before deployment.
It had not been possible to test Pull Requests on our staging deployment because our automated workflows don&amp;rsquo;t have access to secrets.
This resulted in my writing the &lt;a href="https://github.com/sgibson91/test-this-pr-action">&lt;code>test-this-pr&lt;/code> action&lt;/a> and this blog is a retrospective of what I learned over that process.&lt;/p></description></item><item><title>Continuous Integration: Fail Fast and Fail First</title><link>https://sgibson91.github.io/blog/continuous-integration/</link><pubDate>Thu, 27 Feb 2020 00:00:00 +0000</pubDate><guid>https://sgibson91.github.io/blog/continuous-integration/</guid><description>&lt;p>Sarah and Graham have different career backgrounds - Sarah having come through academia whereas Graham earned his stripes in industry. However in their current roles, they often find themselves using the same tools, for example Continuous Integration. They have written this blog post to identify how academia and industry may use Continuous Integration in different ways, and what they might learn from one another.&lt;/p>
&lt;h2 id="what-is-continuous-integration-and-why-do-we-use-it">What is Continuous Integration and why do we use it?&lt;/h2>
&lt;p>In Continuous Integration (CI) and Continuous Deployment (CD), the key concept is &amp;ldquo;continuous&amp;rdquo;. That is where it departs from what software engineering teams were doing before: rather than &lt;em>eventually&lt;/em> integrating, at the end of developing a feature, we do it &lt;em>continuously&lt;/em>, as we&amp;rsquo;re working. Instead of &lt;em>eventually&lt;/em> deploying, when we&amp;rsquo;ve got a collection of features built and bugs fixed, we do it &lt;em>continuously&lt;/em>.&lt;/p></description></item></channel></rss>